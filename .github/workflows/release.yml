name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Qontinui Runner v${{ steps.get_version.outputs.version }} (Beta)
          draft: true
          prerelease: true
          body: |
            ## Qontinui Runner v${{ steps.get_version.outputs.version }} (Beta)

            ### ⚠️ Beta Release
            This is a beta release and may contain bugs. Please report any issues you encounter.

            ### Installation
            1. Download the appropriate installer for your platform
            2. Run the installer (you may need to allow it in your security settings)
            3. Launch Qontinui Runner from your applications

            ### Features
            - Execute automation projects from Qontinui Web
            - Real-time execution monitoring
            - Configuration management
            - Error recovery and logging

            ### What's New
            - Comprehensive error handling and recovery
            - User-friendly error messages
            - Automatic crash reporting
            - Auto-update capability
            - Beta status indicator

            ### Known Issues
            - Please check the [issues page](https://github.com/your-username/qontinui-runner/issues) for known issues

            ### Checksums
            Checksums will be added after the build completes.

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci

      # Signing is disabled for alpha releases - will be enabled when certificates arrive
      # - name: Import Apple certificates (macOS)
      #   if: runner.os == 'macOS'
      #   env:
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      #   run: |
      #     # Create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
      #
      #     # Import certificate from secrets
      #     echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
      #
      #     # Create temporary keychain
      #     security create-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$APPLE_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
      #
      #     # Import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      # - name: Import Windows certificate
      #   if: runner.os == 'Windows'
      #   env:
      #     WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      #     WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      #   run: |
      #     New-Item -ItemType directory -Path certificate
      #     Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
      #     certutil -decode certificate/tempCert.txt certificate/cert.pfx
      #     Remove-Item certificate/tempCert.txt

      - name: Build Tauri app
        # Tauri signing disabled for alpha - will be enabled when certificates arrive
        # env:
        #   TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        #   TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: npm run tauri build -- --target ${{ matrix.target }}

      # - name: Sign Windows executable
      #   if: runner.os == 'Windows'
      #   run: |
      #     & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd SHA256 /f certificate/cert.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td SHA256 src-tauri/target/release/bundle/msi/*.msi
      #     & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd SHA256 /f certificate/cert.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td SHA256 src-tauri/target/release/bundle/nsis/*.exe

      # - name: Notarize macOS app
      #   if: runner.os == 'macOS'
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #   run: |
      #     # Find the .app bundle
      #     APP_PATH=$(find src-tauri/target/release/bundle/macos -name "*.app" -type d | head -n 1)
      #     DMG_PATH=$(find src-tauri/target/release/bundle/dmg -name "*.dmg" | head -n 1)
      #
      #     # Notarize the DMG
      #     xcrun notarytool submit "$DMG_PATH" \
      #       --apple-id "$APPLE_ID" \
      #       --password "$APPLE_PASSWORD" \
      #       --team-id "$APPLE_TEAM_ID" \
      #       --wait
      #
      #     # Staple the notarization
      #     xcrun stapler staple "$DMG_PATH"

      - name: Generate checksums
        shell: bash
        run: |
          cd src-tauri/target/release/bundle

          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            sha256sum deb/*.deb appimage/*.AppImage > checksums-${{ matrix.name }}.txt
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            shasum -a 256 dmg/*.dmg > checksums-${{ matrix.name }}.txt
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            certutil -hashfile msi/*.msi SHA256 > checksums-${{ matrix.name }}.txt
            certutil -hashfile nsis/*.exe SHA256 >> checksums-${{ matrix.name }}.txt
          fi

      - name: Upload release assets (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/checksums-${{ matrix.name }}.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets (macOS)
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/checksums-${{ matrix.name }}.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets (Windows)
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/checksums-${{ matrix.name }}.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-update-json:
    needs: [create-release, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Generate update manifest
        run: |
          cat > update.json << EOF
          {
            "version": "v${{ needs.create-release.outputs.release_version }}",
            "notes": "Beta release with stability improvements and auto-update support",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "darwin-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.release_version }}/qontinui-runner_${{ needs.create-release.outputs.release_version }}_x64.dmg"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.release_version }}/qontinui-runner_${{ needs.create-release.outputs.release_version }}_aarch64.dmg"
              },
              "linux-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.release_version }}/qontinui-runner_${{ needs.create-release.outputs.release_version }}_amd64.AppImage"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.release_version }}/qontinui-runner_${{ needs.create-release.outputs.release_version }}_x64.msi"
              }
            }
          }
          EOF

      - name: Upload update manifest
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: update.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
